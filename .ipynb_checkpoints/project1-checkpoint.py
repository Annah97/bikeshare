{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a5260a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d175e1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feb5ee44",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    city = input(\"Enter the name of the city: \").lower()\n",
    "    condition = True\n",
    "    while condition:\n",
    "        if city in CITY_DATA.keys():\n",
    "            condition = False\n",
    "        else:\n",
    "            print(\"City must be one of: (chicago, new york city, washington)\")\n",
    "            city = input(\"Enter the name of the city: \").lower()\n",
    "        \n",
    "    # get user input for month (all, january, february, ... , june)\n",
    "    MONTH_NAME = [\"all\", \"january\", \"february\", \"march\", \"April\", \"may\", \"june\"]\n",
    "    month = input(\"Enter the name of the month: \").lower()\n",
    "    while condition == False:\n",
    "        if month in MONTH_NAME:\n",
    "            condition = True\n",
    "        else:\n",
    "            print(\"Month must be one of: (all, january, february, ... , june)\")\n",
    "            month = input(\"Enter the name of the month: \").lower()\n",
    "        \n",
    "    # get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    DAY_NAME = [\"all\", \"monday\",\"tuesday\",\"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n",
    "    day = input(\"Enter the name for day of the week: \").lower()\n",
    "    while condition:\n",
    "        if day in DAY_NAME:\n",
    "            condition = False\n",
    "        else:\n",
    "            print(\"Day must be one of: (all, monday, tuesday, ... , sunday)\")\n",
    "            day = input(\"Enter the name for day of the week: \").lower()\n",
    "    \n",
    "    print('-'*40)\n",
    "    return city, month, day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "341b9fac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "    df[\"month\"] = pd.to_datetime(df[\"Start Time\"]).dt.strftime(\"%B\").str.lower()\n",
    "    df[\"day\"] = pd.to_datetime(df[\"Start Time\"]).dt.strftime(\"%A\").str.lower()\n",
    "    if month != \"all\" and day == \"all\":\n",
    "        df = df[df.month == month]\n",
    "    elif month == \"all\" and day != \"all\":\n",
    "        df = df[df.day == day]\n",
    "    elif month != \"all\" and day != \"all\":\n",
    "        df = df[((df.month == month) & (df.day == day))]\n",
    "    \n",
    "    df = df.iloc[:,:-2].reset_index(drop=True)\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08279355",
   "metadata": {},
   "outputs": [],
   "source": [
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display the most common month\n",
    "    common_month = pd.to_datetime(df[\"Start Time\"]).dt.strftime(\"%B\").value_counts().index[0]\n",
    "\n",
    "    # display the most common day of week\n",
    "    common_day = pd.to_datetime(df[\"Start Time\"]).dt.strftime(\"%A\").value_counts().index[0]\n",
    "\n",
    "    # display the most common start hour\n",
    "    common_start_hour = pd.to_datetime(df[\"Start Time\"]).dt.strftime(\"%H\").value_counts().index[0]\n",
    "    \n",
    "    print(\"Most common; \", \\\n",
    "          \"- month: %s\" % common_month, \\\n",
    "          \"- day: %s\" % common_day, \\\n",
    "          \"- start hour: %s\" % common_start_hour, sep = \"\\n\")\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "997aa7d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display most commonly used start station\n",
    "    common_start_station = df[\"Start Station\"].value_counts().index[0]\n",
    "\n",
    "    # display most commonly used end station\n",
    "    common_end_station = df[\"End Station\"].value_counts().index[0]\n",
    "\n",
    "    # display most frequent combination of start station and end station trip\n",
    "    common_start_end_station = (\"From\" + \" \" + df[\"Start Station\"] + \" \" + \"To\" + \" \" + df[\"End Station\"]).value_counts().index[0]\n",
    "    \n",
    "    print(\"Most commonly used; \", \\\n",
    "         \"- start station: %s\" % common_start_station, \\\n",
    "         \"- end station: %s\" % common_end_station, \\\n",
    "         \"- start + end station: %s\" % common_start_end_station, sep = \"\\n\")\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7c37b58",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display total travel time\n",
    "    total_duration = df[\"Trip Duration\"].sum()\n",
    "\n",
    "    # display mean travel time\n",
    "    mean_duration = np.mean(df[\"Trip Duration\"])\n",
    "    \n",
    "    print(\"- total travel time: %s\" % total_duration, \\\n",
    "         \"- mean travel time: %s\" % mean_duration, sep = \"\\n\")\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ac52e1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Display counts of user types\n",
    "    user_types = df[\"User Type\"].value_counts()\n",
    "   \n",
    "    print(\"*\"*5,\" Counts of User Types \",\"*\"*5, sep = \"\")\n",
    "    print(user_types)\n",
    "    print(\"*\"*32)\n",
    "    \n",
    "    # Display counts of gender\n",
    "    if 'Gender' in df.columns:\n",
    "        gender = df[\"Gender\"].value_counts()\n",
    "        print()\n",
    "        print(\"*\"*12,\" Gender \",\"*\"*12, sep = \"\")\n",
    "        print(gender)\n",
    "        print(\"*\"*32)\n",
    "        print()\n",
    "     # Display earliest, most recent, and most common year of birth\n",
    "    if 'Birth Year' in df.columns:\n",
    "        earliest =int(df[\"Birth Year\"].min())\n",
    "        recent = int(df[\"Birth Year\"].max())\n",
    "        common = int(df[\"Birth Year\"].value_counts().index[0])\n",
    "        print(\"*\"*5,\" Birth Year Stats \",\"*\"*5, sep = \"\")\n",
    "        print(\"- earliest year: %s\" % earliest, \\\n",
    "             \"- recent year: %s\" % recent, \\\n",
    "             \"- common year: %s\" % common, sep = \"\\n\")\n",
    "        print(\"*\"*32)\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddbb4cb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "city, month, day = get_filters()\n",
    "df = load_data(city, month, day)\n",
    "\n",
    "time_stats(df)\n",
    "station_stats(df)\n",
    "trip_duration_stats(df)\n",
    "user_stats(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a86a52e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
